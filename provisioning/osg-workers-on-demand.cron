#!/bin/bash

# Script for submitting workers to the Open Science Grid

# The password is the argument
PASSWORD=$1
if [ "x$PASSWORD" = "x" ]; then
    echo "Please specify a password"
    exit 1
fi
PW_HASH=`echo "$PASSWORD" | sha256sum | cut -d ' ' -f 1`

. /cvmfs/oasis.opensciencegrid.org/osg/modules/lmod/current/init/bash
module load cctools

for PROJECT in EEMT-$PW_HASH; do

    WAITING=0
    for VALUE in `work_queue_status --project-name=$PROJECT | grep -v ^PROJECT | awk '{print $4;}'`; do
        WAITING=$(($WAITING + $VALUE))
    done
    
    RUNNING=0
    for VALUE in `work_queue_status --project-name=$PROJECT | grep -v ^PROJECT | awk '{print $5;}'`; do
        RUNNING=$(($RUNNING + $VALUE))
    done
    
    WORKERS=0
    for VALUE in `work_queue_status --project-name=$PROJECT | grep -v ^PROJECT | awk '{print $7;}'`; do
        WORKERS=$(($WORKERS + $VALUE))
    done
    
    echo "$PROJECT     Waiting=$WAITING, Running=$RUNNING, Workers=$WORKERS"
    
    # any waiting tasks? Sometimes we can have 0 waiting, but a mismatch
    # between workers and running
    if [ $WORKERS -gt 0 -a $RUNNING -gt 0 ]; then
        DIFF=$(($RUNNING - $WORKERS))
        if [ $DIFF -gt 100 ]; then
            echo "No tasks waiting"
            continue
        fi
    elif [ $WAITING = 0 ]; then
        echo "No tasks waiting"
        continue
    fi
    
    # max workers?
    if [ $WORKERS -gt 10 ]; then
        echo "Too many workers. "
        continue
    fi
    
    # start slow to make sure the system works
    NEW_WORKERS=20
    
    if [ $WAITING -gt 0 -a $RUNNING -gt 0 ]; then
        NEW_WORKERS=$WAITING
    fi
    
    # limit the number of new workers to 100 per iteration
    if [ $NEW_WORKERS -gt 100 ]; then
        NEW_WORKERS=100
    fi

    # make sure we don't have too many idle jobs
    IDLE_JOBS=`condor_q $USER | grep " I " | wc -l`
    if [ $IDLE_JOBS -gt 50 ]; then
        echo "Too many idle jobs"
        continue
    fi
    
    echo "Submitting $NEW_WORKERS new workers..."
    
    ACCTPROJECT="SOL"
    if [ "x$USER" = "xrynge" ]; then
        ACCTPROJECT="OSG-Staff"
    fi
    
    # keep logs on the scratch filesystem
    WORK_DIR=/local-scratch/$USER/workqueue-workers/`/bin/date +'%F_%H%M%S'`
    mkdir -p $WORK_DIR/logs
    cd $WORK_DIR

    echo "$PASSWORD" >password.txt
    
    # we need a wrapper
    cat >sol-worker.sh <<EOF
#!/bin/bash
set -x
set -e
export PATH=/opt/eemt/bin:/opt/eemt/grass-7.2.0/bin:\$PATH
export LD_LIBRARY_PATH=/opt/eemt/lib:/opt/eemt/grass-7.2.0/lib
touch dummy.txt
work_queue_worker -P password.txt -M $PROJECT -s \$PWD -t 600
EOF
chmod 755 sol-worker.sh

# htcondor_submit file
cat >htcondor.sub <<EOF
universe = vanilla

executable = sol-worker.sh

Requirements = HAS_SINGULARITY == TRUE

request_cpus = 1
request_memory = 1800M
request_disk = 15G

+SingularityImage = "http://xd-login.opensciencegrid.org/scratch/eemt/singularity/eemt-current.img"

transfer_input_files = password.txt
transfer_output_files = dummy.txt

output = logs/\$(Cluster).\$(Process).out
error = logs/\$(Cluster).\$(Process).err
log = logs/\$(Cluster).\$(Process).log

ShouldTransferFiles = YES
when_to_transfer_output = ON_EXIT

periodic_remove = ( JobStatus == 5 ) && ( ( CurrentTime - EnteredCurrentStatus ) > 1800 )

+projectname = "$ACCTPROJECT" 

notification = Never

queue $NEW_WORKERS

EOF
    condor_submit htcondor.sub

done
