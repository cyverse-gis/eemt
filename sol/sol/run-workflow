#!/usr/bin/env python

from __future__ import print_function
import sys
import shutil
from subprocess import Popen, STDOUT, PIPE
import argparse, getpass
import sys, os, datetime
import urllib
import imp
from Tiff import Tiff

# tiffparser = imp.load_source("tiffparser","./parser.py")
quiet=True
script_location = os.path.abspath(os.path.dirname(sys.argv[0]))

# Print error messages 
def error(*objs):
    print("ERROR: ", *objs, file=sys.stderr)
    exit(1)
def warning(*objs):
    print("WARNING: ", *objs, file=sys.stderr)
def log(*objs):
    log_file = open("task_output.log","a")
    print(*objs,file=log_file)
    log_file.close()
def error_log(proj_dir,*objs):
    error_file = open(os.path.join(proj_dir,"sys.err"),"a")
    print(*objs,file=error_file)
    error_file.close()

# Create variables for months and days of the month
MONTHS=["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]
MONTH_DAYS=[[1,31],[32,59],[60,90],[91,120],[121,150],[152,181],[182,212],[213,243],[244,273],[274,304],[305,334],[335,365]]

# Create project directories for the input and output data
def create_project_directories(proj_dir):
    if not os.path.exists(os.path.join(proj_dir,"global")):
        os.makedirs(os.path.join(proj_dir,"global","daily"))
        os.makedirs(os.path.join(proj_dir,"global","monthly"))
    if not os.path.exists(os.path.join(proj_dir,"insol")):
        os.makedirs(os.path.join(proj_dir,"insol","daily"))
        os.makedirs(os.path.join(proj_dir,"insol","monthly"))

# Run r.sun.mp to generate global irradiation and hourly sunlight
def rsun_tasks(args, makeflow, proj_dir, days, dem):
    tasks=0

    makeflow += "\n\n\n"
    makeflow += "CATEGORY=\"rsun\"\n"
    makeflow += "CORES=" + str(args.num_threads) + "\n"
    makeflow += "MEMORY=" + str(args.num_threads * 1000) + "\n"
    makeflow += "DISK=" + str(args.num_threads * 2000) + "\n"

    for day in days: #days is equal to range(1,366)
        makeflow += "\n"
        makeflow += "global/daily/total_sun_day_%d.tif insol/daily/hours_sun_day_%d.tif : rsun.sh %s \n" %(day, day, dem)
        makeflow += "\t/bin/bash rsun.sh %s -d %d -D . -s %s -l %s -a %s -n %d\n" % (dem, day, args.step, args.linke_value, args.albedo_value, args.num_threads)
        tasks=tasks+1
    return makeflow, tasks

# Run r.series and summate the r.sun output
def monthly_sum(makeflow, proj_dir, dem):

    makeflow += "\n\n\n"
    makeflow += "CATEGORY=\"summary\"\n"
    makeflow += "CORES=1\n"
    makeflow += "MEMORY=3000\n" # increased ram to 3GB from 2.5GB
    makeflow += "DISK=2000\n" # increased disk from 1GB to 2GB
    i = 0
    for month in MONTHS:
        start_day = MONTH_DAYS[i][0] 
        end_day   =  MONTH_DAYS[i][1]
        global_inputs = ""
        insol_inputs  = ""
        outputs = ""

        for day in range(start_day,end_day+1):
            global_inputs=global_inputs + "global/daily/total_sun_day_%d.tif " % (day)
            insol_inputs=insol_inputs + "insol/daily/hours_sun_day_%d.tif " % (day)

        outputs = "global/monthly/total_sun_%s_sum.tif " % month \
                + "insol/monthly/hours_sun_%s_sum.tif " % month \

        makeflow += "\n"
        makeflow += "%s: rsum.sh %s %s %s \n" %(outputs, dem, global_inputs, insol_inputs)
        makeflow += "\t./rsum.sh %s -D . %s %s %s \n" %(month, dem, global_inputs, insol_inputs)

        i = i+1
    return makeflow, i 

def main():
##--Argument Parser
    parser = argparse.ArgumentParser()
    parser.add_argument('--name','-n',dest="name")
    parser.add_argument('-O',dest="output")
    parser.add_argument('-v',dest="verbose")
    parser.add_argument('--step',dest="step")
    parser.add_argument('--linke_value',dest="linke_value")
    parser.add_argument('--albedo_value',dest="albedo_value")
    parser.add_argument('--num_threads',dest="num_threads")
    parser.add_argument('args',nargs=1)
    args = parser.parse_args()
    dem = args.args[0]

    name        = args.name
    proj_dir    = args.output
    verbose     = args.verbose
    port        = 0 # random port

##--Argument Validation
##--Default WQ name
    if not name:
        name=getpass.getuser() + "_SOL"
##--Verify DEM Exists
    if not os.path.isfile(dem):
        error("DEM not found!")
##--Input DEM Must be *.tif
    if dem[-4:] != ".tif":
        error("DEM must be a .tif file.")
##--If output null, output to current directory
    if not proj_dir:
        proj_dir="./"+"sol_"+dem[:-4]
    if verbose:
        quiet=False
    start=datetime.datetime.now()
    print("run-workflow started at: ",start.strftime("%d%b %H:%M"))
##--default threads for r.sun.mp
    if not args.num_threads:
        args.num_threads = 4
    # make sure it is an int so we can do arithmetic later
    args.num_threads = int(args.num_threads) 

##--Create project directory structure
    create_project_directories(proj_dir)

    # the actual workflow definition
    makeflow = ""
    
    # needed for multicore slots
    makeflow += "CATEGORY=\"analysis\"\n"
    makeflow += "CORES=1\n"
    makeflow += "MEMORY=4000\n" # increased ram to 3GB from 2.5GB
    makeflow += "DISK=2000\n" # increased disk from 1GB to 2GB

    #test=tiffparser.TiffParser()
    #test.loadTiff(dem)
    #test.read_meta(dem)
    #test_coords = test.getProjCoords()
    #dem_path = test.convert_opentopo(proj_dir,dem)
    dem_tif = tiffparser.TiffParser()
    #dem_tif.loadTiff(dem_path)
    dem_coords = dem_tif.getProjCoords()
    lrx = float(dem_coords[0][0].split(',')[0])+4000 # we are adding a 4km buffer to the DEM to ensure we avoid edge effects in the reprojection
    lry = float(dem_coords[0][0].split(',')[1])-4000
    ulx = float(dem_coords[0][1].split(',')[0])-4000
    uly = float(dem_coords[0][1].split(',')[1])+4000

    sys.stdout.flush()

    # Create the full workflow - this means makeflow rules for all the compute steps
      
    # Call GRASS r.sun and calculate for days 1-365 of the year
    makeflow,tasks_sun = rsun_tasks(args, makeflow, proj_dir, range(1,366), dem_tif.getName()+".tif")
    
    # Call GRASS and calculate sum global radiation and hours of insolation
    makeflow,tasks_avg = monthly_sum(makeflow, proj_dir, dem_tif.getName()+".tif") 

    # Copies of binaries
    for binary in ["rsum.sh", "rsun.sh"]:
        shutil.copy2("%s/%s" %(script_location, binary), "%s/%s" %(proj_dir, binary))
    
    os.chdir(proj_dir)
    f = open("workflow.mf", "w")
    f.write(makeflow)
    f.close()
    sys.stdout.flush()

    # Make sure the ~/.eemt-makeflow-password file exists - change this often.
    if not os.path.exists(os.path.expanduser("~/.eemt-makeflow-password")):
        print("~/.eemt-makeflow-password does not exist! Unable to submit workflow.")
        sys.exit(1)

    process=Popen("makeflow --retry-count=3 --batch-type=wq --password=" + os.path.expanduser("~/.eemt-makeflow-password") + " --wq-keepalive-interval=180 --port=%d --project=%s workflow.mf" %(port, name), shell=True)
    process.communicate()

if __name__ == '__main__':
    main()
