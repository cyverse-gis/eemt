#!/usr/bin/env python

from __future__ import print_function

import sys
import shutil
from subprocess import Popen, STDOUT, PIPE


MONTHS=["jan","feb","mar","apr","may","jun","jul","aug","sep","oct","nov","dec"]
MONTH_DAYS=[[1,31],[32,59],[60,90],[91,120],[121,150],[152,181],[182,212],[213,243],[244,273],[274,304],[305,334],[335,365]]
PARAMS=["tmin","tmax","vp","prcp"]


def error(*objs):
    print("ERROR: ", *objs, file=sys.stderr)
    exit(1)

def warning(*objs):
    print("WARNING: ", *objs, file=sys.stderr)

def log(*objs):
    log_file = open("task_output.log","a")
    print(*objs,file=log_file)
    log_file.close()

def error_log(proj_dir,*objs):
    error_file = open(os.path.join(proj_dir,"sys.err"),"a")
    print(*objs,file=error_file)
    error_file.close()

import argparse, getpass
import sys, os, datetime
import urllib
import imp
from Tiff import Tiff

#rseries = imp.load_source("rseries","./r.series.distributed")
tiffparser = imp.load_source("tiffparser","./parser.py")
quiet=True

script_location = os.path.abspath(os.path.dirname(sys.argv[0]))
na_dem_location = script_location + "/DAYMET/NA_DEM/na_dem.tif"

def eemt_tasks(makeflow,proj_dir,syear,eyear,dem):
    tasks = 0
    reemt = os.path.join(script_location,"reemt.sh")
    for year in range(syear,eyear+1):
        for month in MONTHS:
            eemt_topo = "eemt/EEMT_Topo_%s_%d.tif" % (month,year)
            eemt_trad = "eemt/EEMT_Trad_%s_%d.tif" % (month,year)
            total_sun = "global/monthly/total_sun_%s_sum.tif" % month
            hours_sun = "insol/monthly/hours_sun_%s_average.tif" % month
            flat_sun = "global/monthly/flat_total_sun_%s_sum.tif" % month
            slope = "slope_rad.tif"
            aspect= "aspect_rad.tif"
            tmin = "daymet/tmin/tmin_%d_%s_local.tif" % (year,month)
            tmax = "daymet/tmax/tmax_%d_%s_local.tif" % (year,month)
            twi = "twi.tif"
            prcp = "daymet/prcp/prcp_%d_%s_local.tif" % (year,month)
            vp = "daymet/vp/vp_%d_%s_local.tif" % (year,month)
            na_dem = "daymet/NA_DEM/na_dem.tif"

            makeflow += "\n"
            makeflow += "%s %s: reemt.sh %s %s %s %s %s %s %s %s %s %s %s %s\n" %(eemt_topo, eemt_trad, dem, total_sun, hours_sun, flat_sun, slope, aspect, tmin, tmax, twi, prcp, vp, na_dem)
            makeflow += "\t/bin/bash reemt.sh . " + month + " " + str(year) + " " + dem + " " + na_dem + " " + tmin + " " + tmax + " " + vp + " " + " " + prcp + " " + twi + " " + total_sun + " " + hours_sun + " " + flat_sun + " " + slope + " " + aspect + "\n"

            tasks=tasks+1

    return makeflow,tasks

def create_project_directories(proj_dir):
    if not os.path.exists(os.path.join(proj_dir,"global")):
        os.makedirs(os.path.join(proj_dir,"global","daily"))
        os.makedirs(os.path.join(proj_dir,"global","monthly"))
    if not os.path.exists(os.path.join(proj_dir,"insol")):
        os.makedirs(os.path.join(proj_dir,"insol","daily"))
        os.makedirs(os.path.join(proj_dir,"insol","monthly"))
    if not os.path.exists(os.path.join(proj_dir,"eemt")):
        os.makedirs(os.path.join(proj_dir,"eemt"))
        os.makedirs(os.path.join(proj_dir,"eemt/summary"))
        for month in MONTHS:
            os.makedirs(os.path.join(proj_dir,"eemt/summary",month))
        os.makedirs(os.path.join(proj_dir,"eemt/yearly"))
        for year in range(1980,2014):
            os.makedirs(os.path.join(proj_dir,"eemt/yearly/%d" % year))
            for month in MONTHS:
                os.makedirs(os.path.join(proj_dir,"eemt/yearly/%d" % year, month))
    if not os.path.exists(os.path.join(proj_dir,"daymet")):
        os.makedirs(os.path.join(proj_dir,"daymet"))
        os.makedirs(os.path.join(proj_dir,"daymet/tmin"))
        os.makedirs(os.path.join(proj_dir,"daymet/tmax"))
        os.makedirs(os.path.join(proj_dir,"daymet/prcp"))
        os.makedirs(os.path.join(proj_dir,"daymet/vp"))
        #Currently we are not using DAYMET SWE, DAYL, or SRAD data but we are maintaining these for future incorporation.
        #os.makedirs(os.path.join(proj_dir,"daymet/swe"))
        #os.makedirs(os.path.join(proj_dir,"daymet/dayl"))
        #os.makedirs(os.path.join(proj_dir,"daymet/srad"))
        #os.makedirs(os.path.join(proj_dir,"daymet/twi"))


def main():

##--Argument Parser
    parser = argparse.ArgumentParser()
    parser.add_argument('--start-year', '-s', type=int, dest="start")
    parser.add_argument('--end-year', '-e', type=int, dest="end")
    parser.add_argument('--name','-n',dest="name")
    parser.add_argument('-O',dest="output")
    parser.add_argument('-v',dest="verbose")
    parser.add_argument('--step',dest="step")
    parser.add_argument('--linke_value',dest="linke_value")
    parser.add_argument('--albedo_value',dest="albedo_value")
    parser.add_argument('--num_threads',dest="num_threads")
    parser.add_argument('args',nargs=1)
    args = parser.parse_args()

    dem = args.args[0]
    start_year= args.start
    end_year  = args.end
    name      = args.name
    proj_dir  = args.output
    verbose   = args.verbose
    port      = 0 # random port

##--Argument Validation
##--If start=null, start at beginning of time
    if not start_year:
        start_year = 1980
##--If end=null, finish at end of time
    if not end_year:
        end_year = datetime.date.today().year - 2
##--End must be > Start
    if end_year < start_year:
        error("End year must occur after start year!")
##--Default WQ name
    if not name:
        name=getpass.getuser() + "_EEMT"
##--Verify DEM Exists
    if not os.path.isfile(dem):
        error("DEM not found!")
##--Input DEM Must be *.tif
    if dem[-4:] != ".tif":
        error("DEM must be a .tif file.")
##--If output null, output to current directory
    if not proj_dir:
        proj_dir="./"+"eemt_"+dem[:-4]
    if verbose:
        quiet=False
    start=datetime.datetime.now()
    print("run-workflow started at: ",start.strftime("%d%b %H:%M"))
##--default threads for r.sun.mp
    if not args.num_threads:
        args.num_threads = 4
    # make sure it is an int so we can do arithmetic later
    args.num_threads = int(args.num_threads) 


##--Create project directory structure
    create_project_directories(proj_dir)

    # the actual workflow definition
    makeflow = ""

    # needed for multicore slots
    makeflow += "CATEGORY=\"analysis\"\n"
    makeflow += "CORES=1\n"
    makeflow += "MEMORY=4000\n" # increased ram to 3GB from 2.5GB
    makeflow += "DISK=2000\n" # increased disk from 1GB to 2GB

    test=tiffparser.TiffParser()
    test.loadTiff(dem)
    test.read_meta(dem)
    test_coords = test.getProjCoords()
    warped_path = test.convert_opentopo(proj_dir,dem)
    warped_tif = tiffparser.TiffParser()
    warped_tif.loadTiff(warped_path)
    warped_coords = warped_tif.getProjCoords()
    lrx = float(warped_coords[0][0].split(',')[0])+4000
    lry = float(warped_coords[0][0].split(',')[1])-4000
    ulx = float(warped_coords[0][1].split(',')[0])-4000
    uly = float(warped_coords[0][1].split(',')[1])+4000

    sys.stdout.flush()

    # create the full workflow - this means makeflow rules for all the compute steps

    ##--Get DAYMET Data for given years
    for extra_file in ["NA_DEM/na_dem.tif"]:
        url = os.path.join("http://xd-login.opensciencegrid.org/scratch/eemtdemo/DAYMET", extra_file)
        extra_dir = os.path.dirname(extra_file)
        makeflow += "\n"
        makeflow += "daymet/%s: \n" %(extra_file)
        makeflow += "\tmkdir -p daymet/%s" %(extra_dir)
        makeflow += " && wget -nv -O daymet/%s %s\n" %(extra_file, url)
    for year in range(start_year,end_year+1):
        for param in PARAMS:
            for month in MONTHS:
                url = os.path.join("http://xd-login.opensciencegrid.org/scratch/eemtdemo/DAYMET",param,param+"_"+str(year)+"_"+month+".tif")
                makeflow += "\n"
                makeflow += "daymet/%s/%s_%d_%s_local.tif: metget.sh\n" %(param, param, year, month)
                makeflow += "\t/bin/bash metget.sh %s %f %f %f %f daymet/%s/%s_%d_%s_local.tif\n" %(url, ulx, uly, lrx, lry, param, param, year, month)

    # Create the full workflow - this means makeflow rules for all the compute steps

    # Call SAGA slope and aspect calculation done in input_rasters.sh
    # this is marked for removal from input_rasters.sh - depreciating SAGA-GIS from this stage of the workflow
    makeflow += "\n"
    makeflow += "aspect_dec.tif slope_dec.tif: input_rasters.sh %s.tif\n" %(warped_tif.getName())
    makeflow += "\t/bin/bash input_rasters.sh %s.tif\n" %(warped_tif.getName())
        
    # Call GRASS r.sun and calculate for days 1-365 of the year
    makeflow,tasks_sun = rsun_tasks(args, makeflow,proj_dir,range(1,366),warped_tif.getName()+".tif")
    
    # Call GRASS and calculate sum global radiation and hours of insolation
    makeflow,tasks_avg = monthly_sum(makeflow, proj_dir, warped_tif.getName()+".tif")

    # copies of binaries
    for binary in ["metget.sh", "rsum.sh", "rsun.sh", "twi.sh", "reemt.sh"]:
        shutil.copy2("%s/%s" %(script_location, binary), "%s/%s" %(proj_dir, binary))
    
    os.chdir(proj_dir)

    f = open("workflow.mf", "w")
    f.write(makeflow)
    f.close()

    sys.stdout.flush()

    process=Popen("makeflow --retry-count=3 --batch-type=wq --password=" + os.path.expanduser("~/.eemt-makeflow-password") + " --wq-keepalive-interval=180 --port=%d --project=%s workflow.mf" %(port, name), shell=True)
    process.communicate()

def rsun_tasks(args, makeflow, proj_dir, days, dem):
    tasks=0

    makeflow += "\n\n\n"
    makeflow += "CATEGORY=\"rsun\"\n"
    makeflow += "CORES=" + str(args.num_threads) + "\n"
    makeflow += "MEMORY=" + str(args.num_threads * 1000) + "\n"
    makeflow += "DISK=" + str(args.num_threads * 2000) + "\n"

    for day in days: #days is equal to range(1,366)
        slope="slope_dec.tif" # this is marked for removal from input_rasters.sh - depreciating SAGA-GIS from this stage of the workflow
        aspect="aspect_dec.tif" # this is marked for removal from input_rasters.sh - depreciating SAGA-GIS from this stage of the workflow
        makeflow += "\n"
        makeflow += "global/daily/total_sun_day_%d.tif insol/daily/hours_sun_day_%d.tif : rsun.sh %s %s %s\n" %(day, day, dem, slope, aspect)
        makeflow += "\t/bin/bash rsun.sh %s %s %s -d %d -D . -s %s -l %s -a %s -n %d\n" % (dem, slope, aspect, day, args.step, args.linke_value, args.albedo_value, args.num_threads)
        tasks=tasks+1
    return makeflow, tasks


def monthly_sum(makeflow, proj_dir, dem):

    makeflow += "\n\n\n"
    makeflow += "CATEGORY=\"summary\"\n"
    makeflow += "CORES=1\n"
    makeflow += "MEMORY=3000\n" # increased ram to 3GB from 2.5GB
    makeflow += "DISK=2000\n" # increased disk from 1GB to 2GB
    i = 0
    for month in MONTHS:
        start_day = MONTH_DAYS[i][0] 
        end_day   =  MONTH_DAYS[i][1]
        global_inputs = ""
        insol_inputs  = ""
        outputs = ""

        for day in range(start_day,end_day+1):
            global_inputs=global_inputs + "global/daily/total_sun_day_%d.tif " % (day)
            insol_inputs=insol_inputs + "insol/daily/hours_sun_day_%d.tif " % (day)

        outputs = "global/monthly/total_sun_%s_sum.tif " % month \
                + "insol/monthly/hours_sun_%s_sum.tif " % month \

        makeflow += "\n"
        makeflow += "%s: rsum.sh %s %s %s \n" %(outputs, dem, global_inputs, insol_inputs)
        makeflow += "\t./rsum.sh %s -D . %s %s %s \n" % (month, dem, global_inputs, insol_inputs)

        i = i+1
    return makeflow, i 

if __name__ == '__main__':
    main()
